root = true

# Don't use tabs for indentation.
[*.cs]
indent_size = 4
indent_style = space
insert_final_newline = true
charset = utf-8-bom

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Avoid "this." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Don't suggest more modern language features
dotnet_style_object_initializer = false:warning
dotnet_style_collection_initializer = false:warning
dotnet_style_coalesce_expression = false:warning
dotnet_style_null_propagation = false:warning
dotnet_style_explicit_tuple_names = false:warning
csharp_style_pattern_matching_over_is_with_cast_check = false:warning
csharp_style_pattern_matching_over_as_with_null_check = false:warning
csharp_style_inlined_variable_declaration = false:warning
csharp_style_throw_expression = false:warning
csharp_style_conditional_delegate_call = false:warning

# Prefer explicit types instead of "var" everywhere
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = false:warning
csharp_style_var_elsewhere = false:warning

# Prefer all constructs to have a block body
csharp_style_expression_bodied_methods = false:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_operators = false:warning
csharp_style_expression_bodied_properties = false:warning
csharp_style_expression_bodied_indexers = false:warning
csharp_style_expression_bodied_accessors = false:warning

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true

# Prefer braces around blocks
csharp_prefer_braces = true:none

# Switch statements
csharp_indent_switch_labels = true
csharp_indent_case_contents = true
csharp_indent_labels = flush_left

# Spacing
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false

# Wrapping
csharp_preserve_single_line_statements = false

# Naming conventions. The order of rules is important!
# Class-like constructs
dotnet_naming_rule.rule_class_like.symbols = symbols_class_like
dotnet_naming_rule.rule_class_like.style = naming_pascal_case
dotnet_naming_rule.rule_class_like.severity = suggestion
dotnet_naming_symbols.symbols_class_like.applicable_kinds = class, struct, enum, property, method, event, namespace
dotnet_naming_style.naming_pascal_case.capitalization = pascal_case

# Interfaces
dotnet_naming_rule.rule_interfaces.symbols = symbols_interfaces
dotnet_naming_rule.rule_interfaces.style = naming_interfaces
dotnet_naming_rule.rule_interfaces.severity = suggestion
dotnet_naming_symbols.symbols_interfaces.applicable_kinds = interface
dotnet_naming_style.naming_interfaces.required_prefix = I
dotnet_naming_style.naming_interfaces.capitalization = pascal_case

# Private const fields (need this separate rule, because for some reason
# the rule for 'static' fields is also applied to 'const' fields)
dotnet_naming_rule.private_const_fields.symbols = symbols_private_const_fields
dotnet_naming_rule.private_const_fields.style = naming_private_const_fields
dotnet_naming_rule.private_const_fields.severity = suggestion
dotnet_naming_symbols.symbols_private_const_fields.applicable_kinds = field
dotnet_naming_symbols.symbols_private_const_fields.applicable_accessibilities = private
dotnet_naming_symbols.symbols_private_const_fields.required_modifiers = const
dotnet_naming_style.naming_private_const_fields.capitalization = pascal_case

# Private static fields
dotnet_naming_rule.private_static_fields.symbols = symbols_private_static_fields
dotnet_naming_rule.private_static_fields.style = naming_private_static_fields
dotnet_naming_rule.private_static_fields.severity = suggestion
dotnet_naming_symbols.symbols_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.symbols_private_static_fields.applicable_accessibilities = private
dotnet_naming_symbols.symbols_private_static_fields.required_modifiers = static
dotnet_naming_style.naming_private_static_fields.required_prefix = g
dotnet_naming_style.naming_private_static_fields.capitalization = pascal_case

# Other private fields
dotnet_naming_rule.private_fields.symbols = symbols_private_fields
dotnet_naming_rule.private_fields.style = naming_private_fields
dotnet_naming_rule.private_fields.severity = suggestion
dotnet_naming_symbols.symbols_private_fields.applicable_kinds = field
dotnet_naming_symbols.symbols_private_fields.applicable_accessibilities = private
dotnet_naming_style.naming_private_fields.required_prefix = m
dotnet_naming_style.naming_private_fields.capitalization = pascal_case

# Non-private fields
dotnet_naming_rule.const_fields.symbols = symbols_other_fields
dotnet_naming_rule.const_fields.style = naming_pascal_case
dotnet_naming_rule.const_fields.severity = suggestion
dotnet_naming_symbols.symbols_other_fields.applicable_kinds = field
